use std::collections::HashMap;
use smallweb::*;
use smallweb::HTTP_RESPONSE::*;
use std::thread;

fn main(){
    serve("127.0.0.1:7000",
          Router::new().get("/h",hello3)
              .validator(|r:Request|Some(r))
              .default(_OK("NOT FOUND".to_string()))
              .get("/:name",hello)
              .get("/",|a:Request| _OK("<h1>HELLOW</h1>".to_string()))
              .get("/a",hello3)
              .thradpool_size(16)
    );
}

fn hello(r:Request)->HTTP_RESPONSE{
    _OK((format!(
"<h1>{}</h1><p> My name is jan</p><details>
<summary>These are details</summary>
<p>Im A detail</p>
</details>
", r.url_params.get("name").unwrap())))
}


fn hello2(r:Request)->HTTP_RESPONSE{
    _OK( "smallweb!".to_owned())
}

fn hello3(r:Request)->HTTP_RESPONSE{
    let mut h=HashMap::new();
    h.insert("Content-Type".to_owned(),"text/html; charset=utf-8".to_owned());
    h.insert("Date".to_owned(),"asldkasdaspodjak 123 ".to_owned());

    let body = reqwest::blocking::get("http://127.0.0.1:7000").unwrap()
        .text().unwrap();
    println!("body = {:?}", body);
    _OK_with_header(body.to_owned(), h)
}

#[test]
fn t(){
   assert_eq!(3,3);
}
